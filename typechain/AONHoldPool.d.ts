/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface AONHoldPoolInterface extends ethers.utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "OWNER_ROLE()": FunctionFragment;
    "_staked(uint256)": FunctionFragment;
    "addPackage(uint256)": FunctionFragment;
    "emergencyWithdrawERC20(address,uint256,address)": FunctionFragment;
    "emergencyWithdrawERC721(address,address,uint256)": FunctionFragment;
    "emergencyWithdrawNative(uint256,address)": FunctionFragment;
    "getPackages(uint256,uint256)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getStakedIds(address)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "name()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "stake(uint256,uint256[])": FunctionFragment;
    "stakeToken()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "toggleBoxType(uint256)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OWNER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_staked",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addPackage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdrawERC20",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdrawERC721",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdrawNative",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPackages",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakedIds",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "toggleBoxType",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "OWNER_ROLE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_staked", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addPackage", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdrawERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdrawERC721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdrawNative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPackages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakedIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakeToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleBoxType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "LogAddPackage(tuple)": EventFragment;
    "LogInitRewardIds(uint256,uint256[])": EventFragment;
    "LogInitRewardIndex(uint256,uint256,uint256)": EventFragment;
    "LogStaked(address,tuple,uint256[],uint256)": EventFragment;
    "LogWithdraw(address,uint256,uint256)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogAddPackage"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogInitRewardIds"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogInitRewardIndex"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogStaked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
}

export class AONHoldPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: AONHoldPoolInterface;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    OWNER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    _staked(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber, string] & {
        withdraw: boolean;
        withdrawTime: BigNumber;
        packageId: BigNumber;
        user: string;
      }
    >;

    addPackage(
      lockTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    emergencyWithdrawERC20(
      token: string,
      amount: BigNumberish,
      sendTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    emergencyWithdrawERC721(
      sendTo: string,
      token: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    emergencyWithdrawNative(
      amount: BigNumberish,
      sendTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getPackages(
      fromIdx: BigNumberish,
      toIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          [string, BigNumber] & { token: string; amount: BigNumber },
          [string, BigNumber] & { token: string; amount: BigNumber }
        ] & {
          isActive: boolean;
          packageId: BigNumber;
          lockTime: BigNumber;
          supply: BigNumber;
          limit: BigNumber;
          currency: [string, BigNumber] & { token: string; amount: BigNumber };
          nft: [string, BigNumber] & { token: string; amount: BigNumber };
        })[]
      ] & {
        packages: ([
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          [string, BigNumber] & { token: string; amount: BigNumber },
          [string, BigNumber] & { token: string; amount: BigNumber }
        ] & {
          isActive: boolean;
          packageId: BigNumber;
          lockTime: BigNumber;
          supply: BigNumber;
          limit: BigNumber;
          currency: [string, BigNumber] & { token: string; amount: BigNumber };
          nft: [string, BigNumber] & { token: string; amount: BigNumber };
        })[];
      }
    >;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    getStakedIds(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { stakedIds: BigNumber[] }>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stake(
      packageId: BigNumberish,
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakeToken(overrides?: CallOverrides): Promise<[string]>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    toggleBoxType(
      packageId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      stakedId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  OWNER_ROLE(overrides?: CallOverrides): Promise<string>;

  _staked(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, BigNumber, string] & {
      withdraw: boolean;
      withdrawTime: BigNumber;
      packageId: BigNumber;
      user: string;
    }
  >;

  addPackage(
    lockTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  emergencyWithdrawERC20(
    token: string,
    amount: BigNumberish,
    sendTo: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  emergencyWithdrawERC721(
    sendTo: string,
    token: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  emergencyWithdrawNative(
    amount: BigNumberish,
    sendTo: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getPackages(
    fromIdx: BigNumberish,
    toIdx: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    ([
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      [string, BigNumber] & { token: string; amount: BigNumber },
      [string, BigNumber] & { token: string; amount: BigNumber }
    ] & {
      isActive: boolean;
      packageId: BigNumber;
      lockTime: BigNumber;
      supply: BigNumber;
      limit: BigNumber;
      currency: [string, BigNumber] & { token: string; amount: BigNumber };
      nft: [string, BigNumber] & { token: string; amount: BigNumber };
    })[]
  >;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  getStakedIds(user: string, overrides?: CallOverrides): Promise<BigNumber[]>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  name(overrides?: CallOverrides): Promise<string>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stake(
    packageId: BigNumberish,
    tokenIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakeToken(overrides?: CallOverrides): Promise<string>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  toggleBoxType(
    packageId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    stakedId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    OWNER_ROLE(overrides?: CallOverrides): Promise<string>;

    _staked(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber, string] & {
        withdraw: boolean;
        withdrawTime: BigNumber;
        packageId: BigNumber;
        user: string;
      }
    >;

    addPackage(
      lockTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    emergencyWithdrawERC20(
      token: string,
      amount: BigNumberish,
      sendTo: string,
      overrides?: CallOverrides
    ): Promise<void>;

    emergencyWithdrawERC721(
      sendTo: string,
      token: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    emergencyWithdrawNative(
      amount: BigNumberish,
      sendTo: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getPackages(
      fromIdx: BigNumberish,
      toIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      ([
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        [string, BigNumber] & { token: string; amount: BigNumber },
        [string, BigNumber] & { token: string; amount: BigNumber }
      ] & {
        isActive: boolean;
        packageId: BigNumber;
        lockTime: BigNumber;
        supply: BigNumber;
        limit: BigNumber;
        currency: [string, BigNumber] & { token: string; amount: BigNumber };
        nft: [string, BigNumber] & { token: string; amount: BigNumber };
      })[]
    >;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    getStakedIds(user: string, overrides?: CallOverrides): Promise<BigNumber[]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    stake(
      packageId: BigNumberish,
      tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakeToken(overrides?: CallOverrides): Promise<string>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    toggleBoxType(
      packageId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(stakedId: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    LogAddPackage(
      package?: null
    ): TypedEventFilter<
      [
        [
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          [string, BigNumber] & { token: string; amount: BigNumber },
          [string, BigNumber] & { token: string; amount: BigNumber }
        ] & {
          isActive: boolean;
          packageId: BigNumber;
          lockTime: BigNumber;
          supply: BigNumber;
          limit: BigNumber;
          currency: [string, BigNumber] & { token: string; amount: BigNumber };
          nft: [string, BigNumber] & { token: string; amount: BigNumber };
        }
      ],
      {
        package: [
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          [string, BigNumber] & { token: string; amount: BigNumber },
          [string, BigNumber] & { token: string; amount: BigNumber }
        ] & {
          isActive: boolean;
          packageId: BigNumber;
          lockTime: BigNumber;
          supply: BigNumber;
          limit: BigNumber;
          currency: [string, BigNumber] & { token: string; amount: BigNumber };
          nft: [string, BigNumber] & { token: string; amount: BigNumber };
        };
      }
    >;

    LogInitRewardIds(
      packageId?: null,
      tokenIds?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber[]],
      { packageId: BigNumber; tokenIds: BigNumber[] }
    >;

    LogInitRewardIndex(
      packageId?: null,
      fromId?: null,
      toId?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { packageId: BigNumber; fromId: BigNumber; toId: BigNumber }
    >;

    LogStaked(
      user?: null,
      package?: null,
      tokenIds?: null,
      time?: null
    ): TypedEventFilter<
      [
        string,
        [
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          [string, BigNumber] & { token: string; amount: BigNumber },
          [string, BigNumber] & { token: string; amount: BigNumber }
        ] & {
          isActive: boolean;
          packageId: BigNumber;
          lockTime: BigNumber;
          supply: BigNumber;
          limit: BigNumber;
          currency: [string, BigNumber] & { token: string; amount: BigNumber };
          nft: [string, BigNumber] & { token: string; amount: BigNumber };
        },
        BigNumber[],
        BigNumber
      ],
      {
        user: string;
        package: [
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          [string, BigNumber] & { token: string; amount: BigNumber },
          [string, BigNumber] & { token: string; amount: BigNumber }
        ] & {
          isActive: boolean;
          packageId: BigNumber;
          lockTime: BigNumber;
          supply: BigNumber;
          limit: BigNumber;
          currency: [string, BigNumber] & { token: string; amount: BigNumber };
          nft: [string, BigNumber] & { token: string; amount: BigNumber };
        };
        tokenIds: BigNumber[];
        time: BigNumber;
      }
    >;

    LogWithdraw(
      user?: null,
      packageId?: null,
      time?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; packageId: BigNumber; time: BigNumber }
    >;

    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; previousAdminRole: string; newAdminRole: string }
    >;

    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    OWNER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    _staked(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    addPackage(
      lockTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    emergencyWithdrawERC20(
      token: string,
      amount: BigNumberish,
      sendTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    emergencyWithdrawERC721(
      sendTo: string,
      token: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    emergencyWithdrawNative(
      amount: BigNumberish,
      sendTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getPackages(
      fromIdx: BigNumberish,
      toIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakedIds(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stake(
      packageId: BigNumberish,
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakeToken(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toggleBoxType(
      packageId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      stakedId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    OWNER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _staked(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addPackage(
      lockTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    emergencyWithdrawERC20(
      token: string,
      amount: BigNumberish,
      sendTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    emergencyWithdrawERC721(
      sendTo: string,
      token: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    emergencyWithdrawNative(
      amount: BigNumberish,
      sendTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getPackages(
      fromIdx: BigNumberish,
      toIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStakedIds(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stake(
      packageId: BigNumberish,
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakeToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toggleBoxType(
      packageId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      stakedId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
