/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ChainVerseEventInterface extends ethers.utils.Interface {
  functions: {};

  events: {
    "AddNFT(address,bool)": EventFragment;
    "AddService(address)": EventFragment;
    "AddSigner(address)": EventFragment;
    "Bid(uint256,address,uint256)": EventFragment;
    "Burned(address,uint256)": EventFragment;
    "ChangeGameForItem(uint256,address,uint256,uint256)": EventFragment;
    "Currency(address,bool)": EventFragment;
    "EndAuction(uint256)": EventFragment;
    "ForceReturn(bool)": EventFragment;
    "GrantAM(address,address)": EventFragment;
    "GrantDeveloper(address,address)": EventFragment;
    "GrantOperation(address,address)": EventFragment;
    "ItemMinted(uint256,uint256,address,address)": EventFragment;
    "ItemMoved(uint256,address,address)": EventFragment;
    "ItemUpdated(uint256)": EventFragment;
    "Listed(uint256,address,uint256,uint8)": EventFragment;
    "Minted(uint256,address)": EventFragment;
    "MoveService(address,uint256,address)": EventFragment;
    "NewBoxType(uint256,string,uint256,uint256,string)": EventFragment;
    "NewCategory(uint256,uint256,string)": EventFragment;
    "NewDeveloper(address,string)": EventFragment;
    "NewGame(address,address,string)": EventFragment;
    "RemoveService(address)": EventFragment;
    "RemoveSigner(address)": EventFragment;
    "ServiceTransfer(address,uint256,address)": EventFragment;
    "SetBaseUri(string)": EventFragment;
    "SetCategoryAddress(address)": EventFragment;
    "SetChainVerseTeam(address)": EventFragment;
    "SetChainVerseToken(address)": EventFragment;
    "SetChainverseAddress(address)": EventFragment;
    "SetCommunityTeam(address)": EventFragment;
    "SetFee(uint256,uint256)": EventFragment;
    "SetInfo(address,uint256,uint256,uint256,uint256,bool)": EventFragment;
    "SetItemAddress(address)": EventFragment;
    "SetNFT(address,tuple)": EventFragment;
    "SetPercentProfit(uint256)": EventFragment;
    "SetPreTypeSoldOut(bool)": EventFragment;
    "SetReverseConfig(tuple)": EventFragment;
    "SetSlime(address)": EventFragment;
    "SetValidator(address)": EventFragment;
    "SetWhitelist(bytes32,string)": EventFragment;
    "Sold(uint256,uint256,uint256,address,address)": EventFragment;
    "SwapIn(bytes32,address,address,uint256,uint256,uint256)": EventFragment;
    "SwapOut(address,address,address,uint256,uint256,uint256)": EventFragment;
    "UnPauseDeveloper(address,bool)": EventFragment;
    "UnPauseGame(address,bool)": EventFragment;
    "Unlisted(uint256)": EventFragment;
    "UpdatePrice(uint256,uint256)": EventFragment;
    "UpdateTokenUri(uint256,string)": EventFragment;
    "Withdraw(uint256,address,address,uint256)": EventFragment;
    "WithdrawItem(address,uint256,address)": EventFragment;
    "WithdrawProfit(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddNFT"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddService"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddSigner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Bid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Burned"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangeGameForItem"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Currency"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EndAuction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ForceReturn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GrantAM"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GrantDeveloper"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GrantOperation"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemMinted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemMoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Listed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Minted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MoveService"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewBoxType"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewCategory"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewDeveloper"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewGame"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveService"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveSigner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ServiceTransfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetBaseUri"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetCategoryAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetChainVerseTeam"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetChainVerseToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetChainverseAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetCommunityTeam"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetInfo"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetItemAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetNFT"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetPercentProfit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetPreTypeSoldOut"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetReverseConfig"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetSlime"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetValidator"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetWhitelist"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Sold"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapIn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapOut"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnPauseDeveloper"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnPauseGame"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unlisted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatePrice"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateTokenUri"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawItem"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawProfit"): EventFragment;
}

export class ChainVerseEvent extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ChainVerseEventInterface;

  functions: {};

  callStatic: {};

  filters: {
    AddNFT(
      nft?: null,
      status?: null
    ): TypedEventFilter<[string, boolean], { nft: string; status: boolean }>;

    AddService(service?: null): TypedEventFilter<[string], { service: string }>;

    AddSigner(signer?: null): TypedEventFilter<[string], { signer: string }>;

    Bid(
      auctionId?: null,
      bidder?: null,
      amount?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { auctionId: BigNumber; bidder: string; amount: BigNumber }
    >;

    Burned(
      account?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { account: string; amount: BigNumber }
    >;

    ChangeGameForItem(
      itemId?: null,
      game?: null,
      jumpInFee?: null,
      jumpOutFee?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, BigNumber],
      {
        itemId: BigNumber;
        game: string;
        jumpInFee: BigNumber;
        jumpOutFee: BigNumber;
      }
    >;

    Currency(
      currency?: null,
      status?: null
    ): TypedEventFilter<
      [string, boolean],
      { currency: string; status: boolean }
    >;

    EndAuction(
      auctionId?: null
    ): TypedEventFilter<[BigNumber], { auctionId: BigNumber }>;

    ForceReturn(force?: null): TypedEventFilter<[boolean], { force: boolean }>;

    GrantAM(
      developerContract?: null,
      am?: null
    ): TypedEventFilter<
      [string, string],
      { developerContract: string; am: string }
    >;

    GrantDeveloper(
      developerContract?: null,
      developer?: null
    ): TypedEventFilter<
      [string, string],
      { developerContract: string; developer: string }
    >;

    GrantOperation(
      game?: null,
      operation?: null
    ): TypedEventFilter<[string, string], { game: string; operation: string }>;

    ItemMinted(
      itemId?: null,
      categoryId?: null,
      game?: null,
      developer?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string, string],
      {
        itemId: BigNumber;
        categoryId: BigNumber;
        game: string;
        developer: string;
      }
    >;

    ItemMoved(
      itemId?: null,
      fromGame?: null,
      toGame?: null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { itemId: BigNumber; fromGame: string; toGame: string }
    >;

    ItemUpdated(
      itemId?: null
    ): TypedEventFilter<[BigNumber], { itemId: BigNumber }>;

    Listed(
      listingId?: null,
      nft?: null,
      tokenId?: null,
      itemType?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, number],
      {
        listingId: BigNumber;
        nft: string;
        tokenId: BigNumber;
        itemType: number;
      }
    >;

    Minted(
      itemId?: null,
      recipient?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { itemId: BigNumber; recipient: string }
    >;

    MoveService(
      nft?: null,
      tokenId?: null,
      service?: null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { nft: string; tokenId: BigNumber; service: string }
    >;

    NewBoxType(
      boxTypeId?: null,
      name?: null,
      limit?: null,
      price?: null,
      prefixUri?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, BigNumber, string],
      {
        boxTypeId: BigNumber;
        name: string;
        limit: BigNumber;
        price: BigNumber;
        prefixUri: string;
      }
    >;

    NewCategory(
      id?: null,
      parentId?: null,
      name?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string],
      { id: BigNumber; parentId: BigNumber; name: string }
    >;

    NewDeveloper(
      developer?: null,
      name?: null
    ): TypedEventFilter<[string, string], { developer: string; name: string }>;

    NewGame(
      game?: null,
      developer?: null,
      name?: null
    ): TypedEventFilter<
      [string, string, string],
      { game: string; developer: string; name: string }
    >;

    RemoveService(
      service?: null
    ): TypedEventFilter<[string], { service: string }>;

    RemoveSigner(signer?: null): TypedEventFilter<[string], { signer: string }>;

    ServiceTransfer(
      nft?: null,
      tokenId?: null,
      receiver?: null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { nft: string; tokenId: BigNumber; receiver: string }
    >;

    SetBaseUri(baseUri?: null): TypedEventFilter<[string], { baseUri: string }>;

    SetCategoryAddress(
      category?: null
    ): TypedEventFilter<[string], { category: string }>;

    SetChainVerseTeam(
      chainverseTeam?: null
    ): TypedEventFilter<[string], { chainverseTeam: string }>;

    SetChainVerseToken(
      chainverseToken?: null
    ): TypedEventFilter<[string], { chainverseToken: string }>;

    SetChainverseAddress(
      chainverse?: null
    ): TypedEventFilter<[string], { chainverse: string }>;

    SetCommunityTeam(
      communityTeam?: null
    ): TypedEventFilter<[string], { communityTeam: string }>;

    SetFee(
      oldFee?: null,
      newFee?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { oldFee: BigNumber; newFee: BigNumber }
    >;

    SetInfo(
      currency?: null,
      sellLimit?: null,
      limitPerUser?: null,
      startTime?: null,
      endTime?: null,
      checkWhitelist?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, boolean],
      {
        currency: string;
        sellLimit: BigNumber;
        limitPerUser: BigNumber;
        startTime: BigNumber;
        endTime: BigNumber;
        checkWhitelist: boolean;
      }
    >;

    SetItemAddress(item?: null): TypedEventFilter<[string], { item: string }>;

    SetNFT(
      nft?: null,
      listingFee?: null
    ): TypedEventFilter<
      [
        string,
        [boolean, BigNumber, BigNumber, string, BigNumber] & {
          isSupport: boolean;
          listingFee: BigNumber;
          auctionFee: BigNumber;
          nftTeam: string;
          percentNFTTeam: BigNumber;
        }
      ],
      {
        nft: string;
        listingFee: [boolean, BigNumber, BigNumber, string, BigNumber] & {
          isSupport: boolean;
          listingFee: BigNumber;
          auctionFee: BigNumber;
          nftTeam: string;
          percentNFTTeam: BigNumber;
        };
      }
    >;

    SetPercentProfit(
      percentChainVerseTeam?: null
    ): TypedEventFilter<[BigNumber], { percentChainVerseTeam: BigNumber }>;

    SetPreTypeSoldOut(
      soldPrevious?: null
    ): TypedEventFilter<[boolean], { soldPrevious: boolean }>;

    SetReverseConfig(
      reveseConfig?: null
    ): TypedEventFilter<
      [
        [BigNumber, BigNumber, BigNumber] & {
          startPercent: BigNumber;
          minPercent: BigNumber;
          increasePercent: BigNumber;
        }
      ],
      {
        reveseConfig: [BigNumber, BigNumber, BigNumber] & {
          startPercent: BigNumber;
          minPercent: BigNumber;
          increasePercent: BigNumber;
        };
      }
    >;

    SetSlime(slimeNft?: null): TypedEventFilter<[string], { slimeNft: string }>;

    SetValidator(
      validator?: null
    ): TypedEventFilter<[string], { validator: string }>;

    SetWhitelist(
      merkleRoot?: null,
      CID?: null
    ): TypedEventFilter<[string, string], { merkleRoot: string; CID: string }>;

    Sold(
      newItemId?: null,
      boxTypeId?: null,
      price?: null,
      user?: null,
      agency?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, string, string],
      {
        newItemId: BigNumber;
        boxTypeId: BigNumber;
        price: BigNumber;
        user: string;
        agency: string;
      }
    >;

    SwapIn(
      txHash?: BytesLike | null,
      token?: string | null,
      to?: string | null,
      tokenId?: null,
      fromChainID?: null,
      toChainID?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber, BigNumber],
      {
        txHash: string;
        token: string;
        to: string;
        tokenId: BigNumber;
        fromChainID: BigNumber;
        toChainID: BigNumber;
      }
    >;

    SwapOut(
      token?: string | null,
      from?: string | null,
      to?: string | null,
      tokenId?: null,
      fromChainID?: null,
      toChainID?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber, BigNumber],
      {
        token: string;
        from: string;
        to: string;
        tokenId: BigNumber;
        fromChainID: BigNumber;
        toChainID: BigNumber;
      }
    >;

    UnPauseDeveloper(
      developer?: null,
      unpaused?: null
    ): TypedEventFilter<
      [string, boolean],
      { developer: string; unpaused: boolean }
    >;

    UnPauseGame(
      game?: null,
      unpaused?: null
    ): TypedEventFilter<[string, boolean], { game: string; unpaused: boolean }>;

    Unlisted(
      listingId?: null
    ): TypedEventFilter<[BigNumber], { listingId: BigNumber }>;

    UpdatePrice(
      listingId?: null,
      price?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { listingId: BigNumber; price: BigNumber }
    >;

    UpdateTokenUri(
      itemType?: null,
      uri?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { itemType: BigNumber; uri: string }
    >;

    Withdraw(
      auctionId?: null,
      bidder?: null,
      currency?: null,
      bid?: null
    ): TypedEventFilter<
      [BigNumber, string, string, BigNumber],
      { auctionId: BigNumber; bidder: string; currency: string; bid: BigNumber }
    >;

    WithdrawItem(
      nft?: null,
      tokenId?: null,
      owner?: null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { nft: string; tokenId: BigNumber; owner: string }
    >;

    WithdrawProfit(
      team?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { team: string; amount: BigNumber }
    >;
  };

  estimateGas: {};

  populateTransaction: {};
}
